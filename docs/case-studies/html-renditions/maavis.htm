
<!-- saved from url=(0083)http://localhost:8000/docs/case-studies/word-docs/_html/HTML5-MaavisUpdated.doc.htm -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">




<link rel="File-List" href="http://localhost:8000/docs/case-studies/word-docs/_html/HTML5-MaavisUpdated.doc_files/filelist.xml">
<link rel="Edit-Time-Data" href="http://localhost:8000/docs/case-studies/word-docs/_html/HTML5-MaavisUpdated.doc_files/editdata.mso">

<title>HTML5 Tamplate</title>

<link rel="themeData" href="http://localhost:8000/docs/case-studies/word-docs/_html/HTML5-MaavisUpdated.doc_files/themedata.thmx">
<link rel="colorSchemeMapping" href="http://localhost:8000/docs/case-studies/word-docs/_html/HTML5-MaavisUpdated.doc_files/colorschememapping.xml">




                        
                        
                        <link rel="stylesheet" href="http://localhost:8000/tools/w2html5/w2html5.css">
                        <link rel="stylesheet" href="http://localhost:8000/tools/w2html5/W3C-WD.css">
                        
                        
                        </head>

<body bgcolor="white" lang="EN-AU" style="background-image: url(http://tools.scholarlyhtml.org/w2html5/WordDownBackground.png); background-repeat: no-repeat no-repeat; "><article itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle"><p align="right"><img width="24" height="72" src="./maavis_files/image002.jpg" v:shapes="_x0000_i1025"></p><table border="0" cellspacing="0" cellpadding="0">
 <tbody><tr>
  <td width="192" valign="top" style="width:144.0pt;border:solid black 1.0pt;
  border-right:none;">
  <p>Author :</p>
  </td>
  <td width="419" valign="top" style="width:314.1pt;border:solid black 1.0pt;
  ">
  <p>Steve Lee</p>
  </td>
 </tr>
 <tr>
  <td width="192" valign="top" style="width:144.0pt;border-top:none;border-left:
  solid black 1.0pt;border-bottom:solid black 1.0pt;border-right:none;
  ">
  <p>Date:</p>
  </td>
  <td width="419" valign="top" style="width:314.1pt;border:solid black 1.0pt;
  border-top:none;">
  <p>27 October 2011</p>
  </td>
 </tr>
 <tr>
  <td width="192" valign="top" style="width:144.0pt;border-top:none;border-left:
  solid black 1.0pt;border-bottom:solid black 1.0pt;border-right:none;
  ">
  <p>Version:</p>
  </td>
  <td width="419" valign="top" style="width:314.1pt;border:solid black 1.0pt;
  border-top:none;">
  <p>0.2.1</p>
  </td>
 </tr>
 <tr>
  <td width="192" valign="top" style="width:144.0pt;border-top:none;border-left:
  solid black 1.0pt;border-bottom:solid black 1.0pt;border-right:none;
  ">
  <p>File Name:</p>
  </td>
  <td width="419" valign="top" style="width:314.1pt;border:solid black 1.0pt;
  border-top:none;">
  <p>HTML5-Maavis.doc</p>
  </td>
 </tr>
 <tr>
  <td width="192" valign="top" style="width:144.0pt;border-top:none;border-left:
  solid black 1.0pt;border-bottom:solid black 1.0pt;border-right:none;
  ">
  <p>QA</p>
  </td>
  <td width="419" valign="top" style="width:314.1pt;border:solid black 1.0pt;
  border-top:none;">
  
  </td>
 </tr>
 <tr>
  <td width="192" valign="top" style="width:144.0pt;border-top:none;border-left:
  solid black 1.0pt;border-bottom:solid black 1.0pt;border-right:none;
  ">
  
  </td>
  <td width="419" valign="top" style="width:314.1pt;border:solid black 1.0pt;
  border-top:none;">
  
  </td>
 </tr>
 <tr>
  <td width="192" valign="top" style="width:144.0pt;border-top:none;border-left:
  solid black 1.0pt;border-bottom:solid black 1.0pt;border-right:none;
  ">
  <p>Notes:</p>
  </td>
  <td width="419" valign="top" style="width:314.1pt;border:solid black 1.0pt;
  border-top:none;">
  <p>0.2.1 ptsefton</p>
  <p>formatting
  tweaks</p>
  <p>TODO: Add
  semantics to document</p>
  <p>TODO: Fix
  problem with logos appearing too small in HTML version (screenshots are fine)</p>
  </td>
 </tr>
</tbody></table><p>This work has been published under a Creative Commons attribution-sharealike 2.0 licence.&nbsp; <img width="24" height="14" src="./maavis_files/image004.png" v:shapes="_x0000_i1026"></p><p>UKOLN is funded by the Joint Information Systems Committee (JISC) of the Higher and Further Education Funding Councils, as well as by project funding from the JISC and the European Union. UKOLN also receives support from the University of Bath where it is based.</p><b><br clear="all" style="page-break-before:auto;
mso-break-type:section-break">
</b><div>



















</div><b><br clear="all" style="page-break-before:auto;
mso-break-type:section-break">
</b><p><b></b></p><br clear="all" style="page-break-before:auto;
mso-break-type:section-break">
<div></div><br clear="all" style="page-break-before:auto;
mso-break-type:section-break">
<div></div><br clear="all" style="page-break-before:auto;
mso-break-type:section-break">
<div></div><br clear="all" style="page-break-before:auto;
mso-break-type:section-break">
<div></div><br clear="all" style="page-break-before:auto;
mso-break-type:section-break">
<div></div><br clear="all" style="page-break-before:auto;
mso-break-type:section-break">
<div></div><br clear="all" style="page-break-before:auto;
mso-break-type:section-break">
<div></div><br clear="all" style="page-break-before:auto;
mso-break-type:section-break">
<div></div><br clear="all" style="page-break-before:always;
mso-break-type:section-break">
<p>Re-Implementation of the Maavis Assistive Technology using HTML5 </p><section><h1><a name="__RefHeading__1_2016074850"></a>About This Case Study</h1><section><h2><a name="__RefHeading__3_2016074850"></a>Target Audience</h2><p>The target audience of this case study is those interested in applications that provide
alternative or innovative user experiences using HTML5 web applications. The
focus is on assistive technology which is designed to enable wider access to media, apps and other online technology. This access may<span class="msoIns"><ins cite="mailto:pt" datetime="2011-11-04T09:19"> </ins></span><span class="msoDel"><del cite="mailto:pt" datetime="2011-11-04T09:19">&nbsp;</del></span><span class="msoDel"><del cite="mailto:pt" datetime="2011-11-04T09:19">may</del></span><span class="msoDel"><del cite="mailto:pt" datetime="2011-11-04T09:19"> </del></span>be for users who have varying
access requirements, such as older users or those with physical or cognitive disabilities. Alternatively it may be for use in environments that require alternative interaction styles, for example in bright light or with restricted access to a mobile device. </p><p>This
case study also provides an insight into the development of applications that can run on a wide range of devices, without the need to be
rebuilt for each. It also covers the benefits of applications that are composed
of reusable UI components in the form of W3C&nbsp; Widgets.&nbsp; Such widgets allow rapid development and
innovation by recombination in different configurations.</p></section><section><h2><a name="__RefHeading__5_2016074850"></a>What Is Covered</h2><p>This case study looks at creating a HTML5 app version of an existing assistive technology program called Maavis – <a href="http://maavis.fullmeasure.co.uk/">http://maavis.fullmeasure.co.uk</a><span class="MsoHyperlink">.</span> Maavis was designed by Peter Cudd at Sheffield's ScHARR for research in enabling people with dementia to engage with ICT. This has since been extended to support others including older learners with mental health issues and children with multiple disabilities. </p><p><img width="407" height="283" src="./maavis_files/image006.png" align="left" alt="Text Box:  Illustration 1: 4 screens from the original Maavis" v:shapes="_x0000_s1026"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p><p>This original Maavis installs and runs only on machines with Windows, thus limiting it use. Creating a new version using HTML5 and Widgets allows Maavis to run on the many platforms that have a web browser. This includes mobile and tablet devices that are becoming increasingly popular with users and allows Maavis to be used in more situations. In addition, HTML5 skills are widely available which broadens the potential developer base, though lower technical entry requirements. Thus it will reach more users and attract more developers, both of which are required for successful open innovation in software through open development. Indeed, there is a great need for such open innovation in the accessibility field in order to provide useful solutions to users individual requirements.</p><p>HTML5 and other open web standards such as widgets provide an ecosystem that develops rapidly, is adopted widely and enables contribution to the specification For example, the addition of open video playing and formats has removed several important barriers to media access, including proprietary lock-in to specific tools that only work on some platforms. Building the application to be composed of
several widgets provides reusable UI components which can then be deployed individually or in combination
in other applications. Widgets also provide methods of sharing and reusing components, and so encourage good practice through example and ensure accessibility is widely available through being 'baked in'.. </p><p>The
approach taken was to prototype key elements of the original desktop Maavis application which provides simple access to media
and communications. These prototyped elements have been decomposed into
potentially useful widgets and hard coded into a simulated version of Maavis with specific screens. This then shows that a HTML5
version of Maavis is feasible and clearly
demonstrates how it may be used to create innovative applications.</p><p><img width="514" height="326" src="./maavis_files/image008.png" align="left" alt="Text Box:  Illustration 2: HTML5 Maavis versions of the same 4 screens" v:shapes="_x0000_s1031"></p><p>In particular the HTML5 audio and video elements
are used with custom HTML 'controls' designed to be part of a standard
interaction scheme that provides user selection of various activities or
resources. The local storage facilities of HTML5 are also investigated as way
to save state and settings.</p><p>Note
that the original Maavis was developed in Mozilla XUL
which is very similar to HTML, javascript and CSS but
allows full platform access. XUL was chosen for initial development as, although
a web solution was favoured, requirements such as off line use and the state of
HTML technology meant it could not be used. Since Maavis
was developed, touch screen and mobile web technologies have mature
significantly and many of the issues originally solved in Maavis
now have other&nbsp;
implementations, such as by using HTML5 storage and responsive
layouts.</p></section><section><h2><a name="__RefHeading__7_2016074850"></a>What Isn’t Covered</h2><p>This case study does not explore general accessibility of HTML apps or how to use HTML5 features to improve it. Web accessibility is well understood (although not always well implemented) and HTML5 adds several new facilities that aid and enhance
general accessibility. It is naturally planned that a HTML Maavis will include accessibility best practice as described by
the Rave In Context widget project's <a href="http://code.google.com/a/apache-extras.org/p/rave-in-context/wiki/WidgetAccessibilityBestPractices">WidgetAccessibilityBestPractices</a> (See Appendix 2) in order to ensure
maximum utility by as many people as possible. Note that Rave In Context has also defined a widget template system that has now moved into the Apache Wookie (incubating) project.</p><p>Also excluded is coverage of any issues that arise in creating HTML applications that are usable and accessible on a wide range of devices and platforms. For example some platforms
have gaps in&nbsp; the
full accessibility stack support. This is a key topic for further phases of work and OpenDirective are are actively supporting the open
development of widely accessible cross platform HTML apps and widgets. e.g Apache Wookie
(Incubating), Apache Rave (Incubating) and Rave in Context.</p><p>No
attempt was made to reproduced several Maavis features. For example running local applications,
including Skype integration for video calls, is not possible as browser
security forbids running programs (unless you want to risk using ActiveX in IE
on Windows only). The integrated scanning for use with accessibility switch
control is also excluded. These features require facilities not currently
available in the sandboxed browser environment that HTML apps run in. It's
interesting to note that Mozilla are exploring joystick support which will
allow alternative device input such as switches.</p></section></section><section><h1><a name="__RefHeading__11_2016074850"></a><a name="__RefHeading__9_2016074850"></a>Use Case</h1><p>Providing
simplified access to media and information allows people to access materials when they might might otherwise have difficulties through having a disability. This will also be of value when a user needs to
access technology when in an unhelpful environment, or when using a device with limited methods of interaction. </p><p>The academic
use case is to facilitate access to on-line course
and/or research materials by more people, in wider situations and
in novel ways. If, for example, VLEs adopted this approach then students with various impairments will have enriched
learning experiences through being able to access content in ways appropriate to their specific preferences and requirements.</p><p><a name="__RefHeading__5_20160748501"></a>An HTML application (or web app) that
provides simplified access will be available to users on more platforms,
including tablets and smartphones, as long as a suitable browser exists.
Development and maintenance will be simplified as a single platform is targeted
(at least in theory). However HTML runs in a restricted browser environment so
there are questions about whether such a tool can be created with all
functionality that requires local access. Compensating this is the realisation
that as more content, media and interaction now happens on-line or in the cloud,,using a HTML5 tool to
mediate access becomes feasible, even beneficial. </p><p>Maavis provides access features through a simple touch, pointer or
accessibility switch access interface using groups of buttons and media
'players' arranged into screens. Viewers are provided for music, video, photos
and web information (web sites). Mavis is designed for use by people with cognitive or physical disabilities, including older users. In fact Maavis
was originally designed for people with dementia in a managed care environment.
Thus simplicity of interaction is paramount. Subsequent development phases
added features for adults with learning difficulties and children with physical
difficulties, both in educational settings. </p><p>A key feature of Maavis which makes it interesting here is that a facilitator can easily collect
related media and provide them for access by the end users.
This makes it a suitable tool for providing access to a cohesive collection of
content. For example, Maavis has been used to provide interactive Tai Chi lessons.</p><p>By re-implementing Maavis in HTML5 we will make it available to a wider audience.</p></section><section><h1><a name="__RefHeading__13_2016074850"></a>Solution
</h1><p>We
have developed a prototype that implements key features of the original XUL Maavis in HTML5 and also uses W3C widgets.
The current Maavis product was analysed for decomposition into suitable widgets
and a simple functional, but hard wired, HTML5 prototype was created to demonstrate how this might be implemented. This was not intended to be a full replacement, but rather a code 'spike' to explore the issues. The protoype may be found at http://maavis.opendirective.net.</p><p>This protoype then facilitated discussion and further development ideas with the Maavis
project team as can be found on the mailing list archives which accessible via http://maavis.fullmeasure.co.uk.</p><p>Key functional areas of Maavis functionality that were targeted and given
HTML5 implementations proved they can be made to work. These
functional areas are.</p><ul><li><p>Screens of buttons containing text and images
and arranged in grids</p></li><li><p>Screens with only buttons that provide navigation and selection</p></li><li><p>'Player' screens containing a viewer (or audio
player) plus control button sets. Specifically for audio, videos, still image slideshow and information (browser).</p></li><li><p>A simple speech screen that speaks words when
buttons are pressed </p></li><li><p>Text to speech to read out screen titles and other information when requested</p></li><li><p>Keyboard access (tab and enter keys to move around and action items)</p></li></ul><section><h2>Widgets</h2><p>According to the W3C Widget spec (<a href="http://www.w3.org/TR/widgets/">http://www.w3.org/TR/widgets/</a> ) </p><blockquote><p>“Widgets
are full-fledged client-side applications that are authored using Web standards such as [HTML] and packaged for distribution. They are typically downloaded and installed on a client machine or device where they run as stand-alone applications, but they can also be embedded into Web pages and run in a Web browser. Examples range from simple clocks, stock tickers, news casters, games and weather forecasters, to complex applications that pull data from multiple sources to be "mashed-up" and presented to a user in some interesting and useful way”</p></blockquote><p>For distribution the web contents of a widget are bundled up into an archive (actually a ZIP archive). When a widget is required a request is made of a widget server such as Apache Wookie (incubating), The server extracts the files and makes them available to the browser&nbsp; which then presents them to the user.</p><p>In
addition to running in a browser or as a standalone application, Widgets
can also be used to provide reusable UI 'components' to be shared between applications. This idea is explored in the prototype by choosing
a wide range of widget decompositions.</p><p>At the point in time of this draft document the the
widgets used in the prototype are not packaged, but exists as discrete files included in iframes that represent the widgets. This approach allows rapid development by avoiding the widget packaging and serving. As a result it also loses some of the advantages of widgets and doesn't fully demonstrate their use. It is expected that further development based on this protoype will soon create useful widgets which will be made available as open source components, perhaps part of the Wookie project..</p><p>The
following images demonstrates some of the widgets
selected in the design.</p><p><img width="607" height="363" src="./maavis_files/image010.png" alt="Text Box:  Illustration 3: Collection browser and control widgets" v:shapes="_x0000_s1027"></p><p><img width="607" height="362" src="./maavis_files/image012.png" alt="Text Box:  Illustration 4: Image viewer and player controls widgets" v:shapes="_x0000_s1030"></p><p><img width="611" height="294" src="./maavis_files/image014.png" alt="Text Box:  Illustration 5: Playlist and player controls widget" v:shapes="_x0000_s1029"></p></section><section><h2>Audio and video players</h2><p>In the original Maavis audio and video players were created using a browser media player
plug-in (VLC) and utilised the XBL standard to make components out of HTML, CSS and script. Unfortunately XBL is not widely supported and the plug in, while open source, is not available for all platforms. Until HTML5 provided
the &lt;audio&gt; and &lt;video&gt; the only other solution was Flash, which is not available on some platforms. The prototype audio and video players build on the HTML5 elements by providing Maavis style controls that script their behaviour.</p></section><section><h2>Text to speech</h2><p>An
important feature of Maavis is the ability to read out screen
titles and button labels using synthetic speech. Such text-to -peech is usually provided by external assistive technology such as screen readers, but in this case it needs to
be part of Maavis. As indicated in the challenges section there is no standard support for text to speech so in the protoype we simply play pre-recorded audio using HTML5 audio. Maavis users have also requested a feature to record and play back audio in addition to automatic text to speech so part of this this has been proven to work.</p></section><section><h2>Local and Session storage</h2><p>Maavis must store a range settings and value during operation. For example facilitators select the available media&nbsp; and select options for the end users such as colours used&nbsp; or if text is read out. Previously this would have to be stored using cookies or on a server as the HTML model doesn't prove storage between pages. HTML5 adds a number of new options for storage of name/value pairs that persist for as long as the browser is open or longer. For the prototype we utilised local storage to keep values need by the
running code. For example the audio player uses session storage to keep track
of the play/pause state and track. </p><p>Future
work will be to explore greater use of local and session storage now that the
developer has discovered how to work round the bug in firefox
which storage working with local files (as described below).</p><p>If
the Wookie Widget server is used then Widget
preferences provide another storage solution. The advantage here is that state would be saved across different devices (at least if served by Wookie). A mixed model could work which falls back to local storage if not hosted by Wookie.&nbsp; This is an area for further
development.</p></section></section><section><h1><a name="__RefHeading__15_2016074850"></a>Impact</h1><p>The prototype demonstrates that a usable
HTML5 version of Maavis can indeed be created. While
there are some issues to be resolved, the rapid advancement of HTML, largely
fuelled by the growing interest in HTML apps on the desktop and mobile
platforms, means it is likely these will soon be resolved. Indeed Windows 8
will use HTML for applications and GNOME has been looking at web&nbsp; and desktop integration for some time.</p><p>The HTML5 version
of Maavis has the potential to provide much wider and easier deployment options than the previous Windows-only version. Complexity of installation has been reduced, for example the need for installing the VLC media player has been replaced by the HTML5 video and audio tags. As standards adoption progresses further alongside new technologies we hope to also remove
dependencies on items such as Skype for video conferencing.</p><p>When complete, the new simple access Widgets will provide useful and accessible components that, in the previous version, were locked into the Maavis application. Of particular interest is the potential to embed the widgets, using the Wookie project,&nbsp; in other applications such as VLEs (Moodle currently supported), CMSs (Drupal and Wordpress currently supported), social tools (Elgg currently supported) and mobile campus information systems (such as Molly and MyMobileBristol). The team are also considering enhancements to the In-Folio e-Portfolio system from JISC TechDis which focuses on supporting those with physical or learning disabilities (http://www.jisctechdis.ac.uk/keyinitiatives/organisationaleffectiveness/enablingtechnology/infolio)</p><p>The reuse of code in this way has an impact on both the sustainability of Maavis and of those projects reusing our code. Project sustainability can be increased through having components that are of value to a wider range of projects and users. By building these widgets in a project with an accessibility focus we not only create reusable components but we ensure that those reusing our code are in turn more accessible to their users. This is particularly important as accessibility is often seen as is a niche market and is routinely given a low priority in application design.</p><p>Furthermore, by adopting a standards based implementation we ensure that Maavis will be able to reuse other HTML5 applications as they become available. For example, one of our team recently built an HTML5 widget that will display Open Document Format documents. This removes the need to install an office suite to read such documents. This widget can be incorporated into the HTML5 version of Maavis very quickly and easily. Similarly, using features provided by the Wookie project it will also be easier to add community sharing features that are planned for Maavis, such as family providing photos albums.</p><p>As a result of this work not only can the existing audiences be reached in more flexible ways, but new business models based on Maavis as an online service become possible. HTML5 will allow Maavis to&nbsp;
reach more users and developers, both of which are required for
successful open innovation in software through open development. This is an area that is being
actively explored by the Maavis team with OpenDirective. </p></section><section><h1><a name="__RefHeading__17_2016074850"></a>Challenges</h1><p>Perhaps the biggest challenge at present is the variation in browser support for HTML5 and related technologies. In fact, as HTML5 will never be a fully completed spec, but is rather an continuous evolution, this will not be completely resolved. Providing good fall-back behaviour for browsers with less than optimal support is complex and expensive work. Consequently, best of breed HTML5 “boilerplate” solutions, with fall-back operations, are being evaluated. Frameworks such has jQuery and jQuery Mobile which provide rich and fully tested UI components, Javascript and CSS libraries, will also be used. </p><p>Supporting variations in target browser and platform support is being targeted through progressive enhancement and responsive design techniques to ensure a good user experience on widely varying equipment. This is an area that is rapidly evolving and requires testing on a wide range of devices. Accordingly this challenge has yet to be completely met. The Rave in Context project, which begins its development phase in late September will further test and enhance the widgets developed in Maavis. Whilst the case study will not be able to report on this aspect of the project we will be able to report on recommendations to that project.</p><p>There are many ways to decompose an application into reusable widgets and we have explored a several in the prototype. They may be other more appropriate decompositions, depending on reuse cases that can be determined and others are likely to be tried as a result of feedback and experience gained from using it. </p><p>In the prototype widgets are represented by iframe elements which raised
a number of issues. </p><p>The browser security concept of same origin policy restricts access to DOM from script on pages pages from a different domain. When using several widgets
the impact is that code in one widget cannot
manipulate another. This means widgets loaded from different sources
cannot easily communicate with each other on the client side. However, this is not a
problem in the case study as all widgets load from the same origin. The traditional 'hack' has been to use <b>window.document.location.hash</b> which can be accessed freely
to pass data. Fortunately, modern browsers now support <b>postMessage</b><b> </b>which provides the loosely coupled message-based connectivity best suited to this task. <span class="MsoHyperlink">Libraries such as </span><a href="http://benalman.com/projects/jquery-postmessage-plugin/">jQuery PostMessage Plugin</a><span class="MsoHyperlink"> also
exist to provide fall back for older browsers. The Wookie
server is also likely to provide a way to share values between widgets it
hosts.</span></p><p><span class="MsoHyperlink">The information viewer presents a
issue that does not occur in the original Maavis
which shows the web page in an embedded browser element that is only available
in XUL. The control buttons are scripted to control this browser element for
pan and zoom. In the HTML pro type the same origin policy means that the
control script cannot manipulate the displayed web page. So as a work around
the web page is shown in an additional iframe inside
the widget&nbsp; iframe in an attempt to provide scrolling by moving
it. This does not work very well and also does not provide zooming, so an
alternative solution will be needed, such as a web general purpose browser
widget.</span></p><p><span class="MsoHyperlink">The original XUL Maavis provides built in
scanning support to allow control with simple switch devices (briefly a
highlight moves between user interface elements until a switch is operated by
the user to select or activate that item). Currently browser standards supports
very limited input devices and events (pointer and keyboard) so switches cannot
be easily used with out extra assistive technology
software. A new W3C events working group has started
to look at new browser inputs such as swipe gestures. Further Mozilla are
exploring joystick support in Firefox and if this becomes a standard it will allow
switch devices to be used as they usually appear as joystic
devices (actually USB HID). For the prototype a workaround was employed using
tab (move) and enter key (select/action). This allows direct keyboard control
and also means assistive technology program for switch users can also interface
successfully.</span></p><p>Another observation is when using tab key access to move between elements iframes are tab stops themselves and so receive focus before subsequent navigation into the contained widget elements. If the iframe elements are removed from the tab order using tabindex='-1' property none of child elements are reachable. This is no doubt by design and it is possible that the widget container should be a tab stop, for example it may have user alterable properties. The Rave project group are looking at in-lineing widgets without the iframe container and that may provide a solution. In fact the whole area of accessible access to widget properties and size/location may need research before this is clear.</p><p>Synthentic text to speech is problematic as there is no standard platform independent way of accessing speech from a browser in order to make self voicing HTML applications. In fact there is no platform standard full stop. A common approach is to use a web service, passing it text and getting audio back which his played. This has some advantage of being server side but raises scalability questions. One such service is the unofficial Google translate feature. The prototype avoids the issue by simply scripting an audio object to play an pre existing audio file. Mozilla have been working on some very powerful audio apis and if this become standard then it may be possible to have HMLT Text to speech 9though it will be processor intensive)</p></section><section><h1><a name="__RefHeading__19_2016074850"></a>Things
Done Differently / Lessons Learnt</h1><p>HTML5 is a rapidly evolving set of standards. This project has sought to push the boundaries of those standards, for example, the original Maavis project embedded Skype video calling features, something that cannot be done using pure HTML5. Fortunately the need for video conference features is not critical to the success of the early phases of the project and work by Google and Mozilla on the WebRTC standard looks like it will address this. However, it would have been a good idea to spend additional time understanding where these limitations lie so that they could be planned for and routed around in a controlled manner during development.</p><p>It is possible to bypass such limitations by using another standard, W3C Widgets,&nbsp; which allows additional features to be specified as required or optional for operation. At first this may seem like a good solution, however, this re-introduces the problem of a client needing installation expertise because each non-standard feature will require configuration. Therefore this approach limits the environment in which these widgets can be used. The HTML5 version of Maavis will continue to operate using only the widgets that are fully supported by the platform. Therefore one needs to be careful during the design of widgets to minimise the use of additional features wherever possible.</p><p>Many of these issues could have been avoided by seeking to implement on a single platform which has a stated goal of supporting all the of the standards in use. This is an important lesson we learned in the original “browser wars”. That is, by designing for the platform that most closely tracks the standards we care about, we are reducing the demands on our immediate development efforts whilst ensuring that we maximise the chances of our code being usable in future versions of competing browsers.</p><p>In this prototype event handled on the buttons in one widget directly manipulate the DOM in others. This is fine in a prototype but real widgets
will not be able to do this due to potentially different origins. In addition this tightly couple design is not flexible and some form of API or message exchange will be required in the final widgets. This could be done client side and most usefully would require new standards. There is some early development in this area, in particular that looking at WebActions and WebIntents, which allow handlers
to be registered to be performed for particular user actions. Alternatively interactions could be managed via a server based service that widgets share, For example, Wookie provides a number of useful services such as OpenSocial and Wave. For HTML Maavis work on this will go hand in hand with the selection of a suitable widget decomposition to give a suitable course grained structure with widgets that are useful in their own right but can interact with others.</p><p>Access of local files (<a href="file://./">file://</a>) in the browser rather than via a web server (http://) can lead to issues due to differing behaviour. File access was initially use to ease development (no need to upload files to a server). File access also allows stand-alone operation with out internet access, something required in several scenarios of Maavis. In this case we hit a bug in Mozilla Firefox, the browser being used for development. The specific bug is <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=507361">https://bugzilla.mozilla.org/show_bug.cgi?id=507361</a>&nbsp; and has now been fixed. A simple solution in cases like this is to use a local web server like XAMPP, both during development and deployment with only local access. Another issue we found is case-sensitivity of elements on differing file
systems. XAMPP or <a href="file://./">file://</a> on Windows ignores
the case case of folders and files whereas
Apache on a Linux hosted site based host does not. Therefore we found when files are accessed
on a web server they may not be found due to case mismatch.</p></section><section><h1><a name="__RefHeading__21_2016074850"></a>Conclusions</h1><p>It's clear that HTML5 has reached a state of
maturity that provides an environment where much of the Maavis key functionality can be implemented as a HTML app. Further, the growing availability of standards conforming browser on many platforms means the HTML5 Maavis can be deployed on many devices and so provides flexibility and reach to more users. By extensions</p><p>The closeness of XUL to HTML meant that much of existing functionality was reproducible in HTML, at least in theory.
Exceptions have already been noted. While HTML running in the browser has limited access to the platform for security reasons, new APIs with platform access are becoming
available to javascript in the browser, especially on mobile platforms. For example
geolocation. In addition, PhoneGap, a tool that allows HTML developed apps to be compile into native apps, provides various APIs and has a stated goal to be redundant when these are provided by browsers. </p><p>This all means HTML Maavis will soon have access to new HTML and platform features providing the opportunity for innovative alternative access to media and communications.</p><p>Further designing the application to be composed of a number of resusable W3C widgets means those widgets can be used in other scenarios and applications. Further, Maavis can take advantage of third party widgets. Using the Wookie
Widget server provides as number of useful extra features, especially storage
and sharing values between widgets.</p><p>In fact this ability to share widgets opens doors for collaboration between projects and companies, not necessarily working in the same market or research space.. This then fosters Open innovation in software through open development of open source and will benefit the wider development community.&nbsp; This is a key focus of OpenDirectives work on key projects such as Apache Wookie (Incubating), Apache Rave (Incubating) and Rave in Context These projects clearly demonstrate the advantages of factoring web based applications into functional UI units.</p></section><section><p><a name="__RefHeading__23_2016074850"></a>Appendix 1:&nbsp; HTML5 Technologies Used</p><p>HTML5 </p><ul><li><p>&nbsp;&lt;Video&gt;</p></li><li><p>&nbsp;&lt;Audio&gt;</p></li><li><p>Local storage</p></li></ul><p>W3C Widgets</p><p>&nbsp;&nbsp; Apache Wookie (Incubating) widget server</p><p><a name="__RefHeading__25_2016074850"></a>Future</p><p>&nbsp; Rave in Context widget templates</p></section><section><p><a name="__RefHeading__23_20160748501"></a>Appendix 2:&nbsp; Resources</p><ul><li><p>Maavis project – <a href="http://maavis.fullmeasure.co.uk/">http://maavis.fullmeasure.co.uk</a></p></li><li><p>HTML5 protoype
– <a href="http://maavis.opendirective.net/">http://maavis.opendirective.net</a></p></li><li><p>Widget spec - <a href="http://www.w3.org/TR/widgets/">www.w3.org/TR/widgets/</a></p></li><li><p>Wookie widget server project - <a href="http://incubator.apache.org/wookie/">http://incubator.apache.org/wookie/</a></p></li><li><p>Rave in context templates and
guidelines - <a href="http://code.google.com/a/apache-extras.org/p/rave-in-context/">http://code.google.com/a/apache-extras.org/p/rave-in-context/</a></p></li></ul></section></article>




































































































































































































































































































































































































</body></html>